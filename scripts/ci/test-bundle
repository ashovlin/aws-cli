#!/usr/bin/env python
# Don't run tests from the root repo dir.
# We want to ensure we're importing from the installed
# binary package not from the CWD.

import os
import re
from contextlib import contextmanager
from subprocess import check_output

_dname = os.path.dirname

REPO_ROOT = _dname(_dname(_dname(os.path.abspath(__file__))))


@contextmanager
def cd(path):
    """Change directory while inside context manager."""
    cwd = os.getcwd()
    try:
        os.chdir(path)
        yield
    finally:
        os.chdir(cwd)


def run(command):
    return check_output(command, shell=True)


def run_make_bundle():
    print("Running make-bundle")
    output = run(f'{REPO_ROOT}/scripts/make-bundle')
    match = re.search(r'Zipped bundle installer is at: (.+?\.zip)', output.decode('utf-8'))
    if not match:
        raise RuntimeError("Could not find bundle path in make-bundle output")

    return match.group(1)


def install_from_bundle(zip_path):
    print(f"Installing from bundle at {zip_path}")
    run(f'unzip -o {bundle_path}')
    cmd = f'sudo {bundle_path[:-4]}/install -i /usr/local/aws -b /usr/local/bin/aws'
    print(cmd)
    run(f'sudo {bundle_path[:-4]}/install -i /usr/local/aws -b /usr/local/bin/aws')


def verify_installation():
    print("Verifying installation...")
    version_output = run("aws --version")
    print(f"Installed AWS CLI version: {version_output}")


if __name__ == "__main__":
    with cd(os.path.join(REPO_ROOT)):
        bundle_path = run_make_bundle()
        install_from_bundle(bundle_path)
        verify_installation()
